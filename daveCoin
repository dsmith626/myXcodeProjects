import UIKit
// Hash - unique ID
// Genesis Block - first block in a chain

// CREATE BLOCK CLASS

class Block {
    var hash = String()
    var data = String()
    var previousHash = String()
    var index = Int()
    
    func createHash() -> String {
    return NSUUID().uuidString.replacingOccurrences(of: "-", with: "")
    }
   
}
// CREATE A BLOCKCHAIN CLASS

class BlockChain {
    
    var chain = [Block]()
  
    func CreateGenesisBlock(data:String) {
        let gBlock = Block()
        gBlock.hash = gBlock.createHash()
        gBlock.data = data
        gBlock.previousHash = "nil - Genesis Block"
        gBlock.index = 0
        
        chain.append(gBlock)
        
    }

    func addBlock(data:String) {
       let newBlock = Block()
        newBlock.hash = newBlock.createHash()
        newBlock.data = data
        newBlock.previousHash = chain[chain.count - 1].hash
        newBlock.index = chain.count
        chain.append(newBlock)
    }
    
}

// CREATE CHAIN

let daveCoin = BlockChain()
daveCoin.CreateGenesisBlock(data: "To : PB; From : PA; Amount : 10 dave")
daveCoin.addBlock(data: "To : PC; From : PB; Amount : 8 dave")
daveCoin.addBlock(data: "To : PA; From : PC; Amount : 25 dave")
daveCoin.addBlock(data: "To : PC; From : PD; Amount : 17 dave")


// TAMPER WITH CHAIN DATA

daveCoin.chain[2].hash = "make me rich"

// PRINT CHAIN DATA

for i in 0...daveCoin.chain.count-1 {
    print("\tBlock: \(daveCoin.chain[i].index)\n\tHash: \(daveCoin.chain[i].hash)\n\tpreviousHash: \(daveCoin.chain[i].previousHash)\n\tdata: \(daveCoin.chain[i].data)\n")
}

// CHECK VALIDITY OF CHAIN

var isChainValid = true

for i in 1...daveCoin.chain.count-1 {
    if daveCoin.chain[i].previousHash != daveCoin.chain[i-1].hash {
        isChainValid = false
        
    }
}
print("Chain is valid: \(isChainValid)")


